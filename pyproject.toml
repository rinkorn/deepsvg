[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "deepsvg"
version = "0.1.0"
description = ""
authors = ["Albert <rinkorn.alb@gmail.com>"]
readme = "README.md"

[tool.poetry.scripts]
run-training = "deepsvg.train:cli"
print-cuda-info = "deepsvg.utils.print_cuda_info:print_cuda_info"

[tool.poetry.dependencies]
python = ">=3.10"
torch = "^2.2.1"
torchvision = "^0.17.1"
tensorflow = "^2.16.1"
tensorboard = "^2.16.2"
torch-tb-profiler = "^0.4.3"
numpy = "^1.26.4"
matplotlib = "^3.8.3"
scikit-learn = "^1.4.1.post1"
scikit-image = "^0.22.0"
pandas = "^2.2.1"
numba = "^0.59.1"
pillow = "^10.2.0"
svgwrite = "^1.4.3"
svglib = "^1.5.1"
cairosvg = "^2.7.1"
networkx = "^3.2.1"
moviepy = "^1.0.3"
umap-learn = {extras = ["plot"], version = "^0.5.5"}
shapely = "^2.0.3"
kivy = "^2.3.0"
tqdm = "^4.66.2"
six = "^1.16.0"
ipykernel = "^6.29.3"
ipywidgets = "^8.1.2"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.7.0"
ruff = "^0.3.4"
mypy = "^1.9.0"
pytest = "^8.1.1"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
myst-nb = "^1.0.0"
sphinx-autoapi = "^3.0.0"
sphinx-rtd-theme = "^2.0.0"

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[[tool.poetry.source]]
name = "torch-cpu"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[[tool.poetry.source]]
name = "torch-cu121"
url = "https://download.pytorch.org/whl/cu121"
priority = "explicit"

[tool.ruff]
# https://docs.astral.sh/ruff/configuration/
# https://laszlo.substack.com/p/cq4ds-python-project-from-scratch
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
line-length = 120
target-version = "py310"


[tool.ruff.lint]
select = [
    "F",  # pyflakes
    "I",  # isort
    "UP", # pyupgrade,
    "E",  # pycodestyle errors
    # "W",  # pycodestyle warnings
    # "C",  # flake8-comprehensions
    # "B",  # flake8-bugbear
]
ignore = [
    "F401", # unused imports
    "F841", # unused variable
    # "E501", # line too long, handled by black
    # "E402", # Module level import not at top of cell
    # "C901",  # too complex
]
fixable = [
    "ALL", # Allow fix for all enabled rules (when `--fix`) is provided.
]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$" # Allow unused variables when underscore-prefixed.


[tool.ruff.format]
exclude = ["*.pyi"]


[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "E402", # Module level import not at top of cell
]
"**/{tests,docs,tools}/*" = [
    "E402", # Module level import not at top of cell
]


[tool.ruff.lint.isort]
order-by-type = true
relative-imports-order = "closest-to-furthest"
extra-standard-library = ["typing"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]
known-first-party = []


[tool.pytest.ini_options]
# addopts = "--cov --cov-report html --cov-report term-missing --cov-fail-under 75"
# addopts = "--cov --cov-report term-missing --cov-fail-under 50"


[tool.coverage.run]
source = ["src"]

